// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum Role {
  USER
  ADMIN
}

model User {
  id             String @id @unique @default(uuid())
  name           String
  email          String @unique
  hashedPassword String
  role           Role   @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  //  accounts      Account[]
}


// model Account {
//   id                Int     @id @default(autoincrement())
//   userId            Int
//   provider          String
//   providerAccountId String
//   type              String?
//   refresh_token     String?
//   access_token      String?
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String?
//   session_state     String?
//   user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }

model Post {
  // id Int @id @unique @default(autoincrement())
  id String @id @unique @default(uuid())

  title  String
  // address String @unique
  body   String
  banner String
  content   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // published: false,
  //     author: { connect: { email: authorEmail } },
}


// model Post {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   title     String
//   content   String?
//   published Boolean  @default(false)
//   viewCount Int      @default(0)
//   author    User?    @relation(fields: [authorId], references: [id])
//   authorId  Int?
// }

